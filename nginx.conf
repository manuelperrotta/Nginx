        }

## HLS APPLICATION ##
        application hls {               # We enabled pushing stream from 'live' application to 'hls' we need to define it of course.
        live on;                        # on|off. Enables this application and allowing live streaming to it. Default=on.
        hls on;                         # on|off. Toggles HLS on or off for this application.
        hls_type live;                  # live|event. Live plays from the current live position. Event plays from the start of the playlist. Default=live.
        hls_path /var/livestream/hls; # Location to store the video fragment files. Will be created if it doesn't exist.
        hls_fragment 5s;                # Sets HLS fragment length in seconds or minutes. Default=5s.
        hls_playlist_length 30s;        # Sets HLS playlist length in seconds or minutes. Default=30s.
        hls_sync 2ms;                   # Timestamp sync threshold. Prevents crackling noise after conversion from low-res (1KHz) to high-res(90KHz). Default=2ms.
        hls_continuous off;             # on|off. In this mode HLS sequence number is started from where it stopped last time. Old fragments are kept. Default=off.
        hls_nested on;                  # on|off. In this mode a subdirectory of hls_path is created for each stream. Default=off.
        hls_cleanup on;                 # on|off. Nginx cache manager process removes old HLS fragments and playlist files from hls_path. Default=on.
        hls_fragment_naming system;     # system = use system time. sequential = use increasing integers. timestamp = use stream timestamp. Default=sequential.
        hls_fragment_slicing plain;     # plain|aligned. Plain: switch fragment when target duration is reached. Aligned: switch fragment when incoming timestamp is a
                                        # multiple of fragment duration. Makes it possible to generate identical fragments on different nginx instances. Default=plain.
        ## ENCRYPTION KEYS      ## !! Only works if you have certificates defined in your HTTP server block (Usually a seperate file in /sites-available/yourfile.conf)
        # hls_keys on;                          # on|off. Enables HLS encryption. AES-128 method is used to encrypt the HLS fragments. Requires ssl module. Default=off.
        hls_key_path /var/livestream/keys;      # Sets the directory where auto-generated HLS keys are saved. Default= hls_path.
        # hls_key_url https://foo.bar/keys;     # Sets url for HLS key file entries. When empty it assumes hls_path. Default= empty.
        # hls_fragments_per_key 100;            # Sets the number of HLS fragments encrypted with the same key. 0 means only one key is created at the publish start and 
                                                # all fragments within the session are encrypted with this key. Default=0.

                ## HLS_VARIANT - Used for variable bitrate streaming. Please read: https://github.com/arut/nginx-rtmp-module/wiki/Directives#hls_variant ##
                ## When hls_variant suffix is matched on stream name then variant playlist is created for the current stream with all entries specified by hls_variant
                ## directives in current application. Stripped name without suffix is used as variant stream name. The original stream is processed as usual.
                ## Optional parameters following the suffix are appended to EXT-X-STREAM-INF in m3u8 playlist. See HLS spec 3.3.10. EXT-X-STREAM-INF for full list.

                #       hls_variant _low BANDWIDTH=288000;      # _low          - Low bitrate, sub-SD resolution
                #       hls_variant _mid BANDWIDTH=448000;      # _mid          - Medium bitrate, SD resolution
                #       hls_variant _high BANDWIDTH=1152000;    # _high         - Higher-than-SD resolution
                #       hls_variant _higher BANDWIDTH=2048000;  # _higher       - High bitrate, HD 720p resolution
                #       hls_variant _src BANDWIDTH=4096000;     # _src          - Source bitrate, source resolution
                }

## MPEG-DASH APPLICATION ##
        application dash {              # These variables will be used since we enabled pushing /live stream to this application.
        live on;                        # on|off. Enables this application and allowing live streaming to it. Default=on.
        dash on;                        # on|off. Toggles MPEG-DASH on the current application.
        dash_path /var/livestream/dash; # Location to store the video fragment files. Will be created if it doesn't exist.
        dash_fragment 5s;               # Sets DASH fragment length in seconds or minutes. Default= 5s.
        dash_playlist_length 30s;       # Sets MPEG-DASH playlist length. Defaults= 30s.
        dash_nested on;                 # on|off. In this mode a subdirectory of dash_path is created for each stream. Default=off.
        dash_cleanup on;                # on|off. Nginx cache manager process removes old DASH fragments and playlist files from dash_path. Default=on.
        }

## YOUTUBE - Only required if you decide to re-stream using this application ##
        #application youtube {
        #       live on;
        #       record off;
        #       allow publish 127.0.0.1;
        #       deny publish all;
        #       push rtmp://a.rtmp.youtube.com/live2 /YOUR-LIVE-STREAM-KEY;
        #}
## TWITCH APPLICATION - Only required if you decide to re-stream using this application ##
        # application twitch {
        #       live on;
        #       record off;
        #       allow publish 127.0.0.1;
        #       deny publish all;
        #       push rtmp://live-ams.twitch.tv/app /live_YOUR-LIVE-STREAM-KEY;
        #       }
        }
}
